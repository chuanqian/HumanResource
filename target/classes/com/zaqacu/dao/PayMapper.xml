<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zaqacu.dao.PayMapper">


    <resultMap id="BaseResultMap" type="com.zaqacu.entity.Pay">
        <id column="pay_id" property="payId" jdbcType="INTEGER"/>
        <result column="pay_staff_uid" property="payStaffUid"/>
        <result column="pay_basic_id" property="payBasicId" jdbcType="INTEGER"/>
        <result column="pay_mertis_id" property="payMertisId" jdbcType="INTEGER"/>
        <result column="pay_rewords" property="payRewords" jdbcType="DOUBLE"/>
        <result column="pay_fine" property="payFine" jdbcType="DOUBLE"/>
        <result column="pay_total" property="payTotal" jdbcType="DOUBLE"/>
        <result column="pay_time" property="payTime" jdbcType="TIMESTAMP"/>
    </resultMap>




    <sql id="Base_Column_List">
    pay_id, pay_staff_uid, pay_basic_id, pay_mertis_id, pay_rewords, pay_fine, pay_total,
    pay_time
  </sql>


    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from pay
        where pay_id = #{payId,jdbcType=INTEGER}
    </select>

  <select id="selectPayBySql" resultMap="BaseResultMap">
      select
      <include refid="Base_Column_List"/>
      from pay
      <where>
          <if test="startTime != null">
              pay_time &gt;= #{startTime}
          </if>
          <if test="endTime != null">
              and pay_time &lt;= #{endTime}
          </if>
          <if test="staffNamePay != null and staffNamePay != ''">
              and pay_staff_uid in (select staff_uid from staff where staff.staff_name like #{staffNamePay})
          </if>
      </where>
      limit #{start},#{rows}
  </select>

    <select id="selectAllPayCount" resultType="Integer">
        select count(pay_id) from pay
    </select>


    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from pay
    where pay_id = #{payId,jdbcType=INTEGER}
  </delete>

    <delete id="deleteByPayIds">
        delete from pay where pay_id in
        <foreach collection="payIds" item="payId" open="(" separator="," close=")">
            #{payId}
        </foreach>
    </delete>


    <insert id="insert" parameterType="com.zaqacu.entity.Pay">
    insert into pay (pay_id, pay_staff_uid, pay_basic_id,
      pay_mertis_id, pay_rewords, pay_fine, 
      pay_total, pay_time)
    values (#{payId,jdbcType=INTEGER}, #{payStaffUid}, #{payBasicId,jdbcType=INTEGER},
      #{payMertisId,jdbcType=INTEGER}, #{payRewords,jdbcType=DOUBLE}, #{payFine,jdbcType=DOUBLE}, 
      #{payTotal,jdbcType=DOUBLE}, #{payTime,jdbcType=TIMESTAMP})
  </insert>


    <insert id="insertSelective" parameterType="com.zaqacu.entity.Pay">
        insert into pay
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="payId != null">
                pay_id,
            </if>
            <if test="payStaffUid != null">
                pay_staff_uid,
            </if>
            <if test="payBasicId != null">
                pay_basic_id,
            </if>
            <if test="payMertisId != null">
                pay_mertis_id,
            </if>
            <if test="payRewords != null">
                pay_rewords,
            </if>
            <if test="payFine != null">
                pay_fine,
            </if>
            <if test="payTotal != null">
                pay_total,
            </if>
            <if test="payTime != null">
                pay_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="payId != null">
                #{payId,jdbcType=INTEGER},
            </if>
            <if test="payStaffUid != null">
                #{payStaffUid},
            </if>
            <if test="payBasicId != null">
                #{payBasicId,jdbcType=INTEGER},
            </if>
            <if test="payMertisId != null">
                #{payMertisId,jdbcType=INTEGER},
            </if>
            <if test="payRewords != null">
                #{payRewords,jdbcType=DOUBLE},
            </if>
            <if test="payFine != null">
                #{payFine,jdbcType=DOUBLE},
            </if>
            <if test="payTotal != null">
                #{payTotal,jdbcType=DOUBLE},
            </if>
            <if test="payTime != null">
                #{payTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>


    <update id="updateByPrimaryKeySelective" parameterType="com.zaqacu.entity.Pay">
        update pay
        <set>
            <if test="payStaffUid != null">
                pay_staff_uid = #{payStaffUid},
            </if>
            <if test="payBasicId != null">
                pay_basic_id = #{payBasicId,jdbcType=INTEGER},
            </if>
            <if test="payMertisId != null">
                pay_mertis_id = #{payMertisId,jdbcType=INTEGER},
            </if>
            <if test="payRewords != null">
                pay_rewords = #{payRewords,jdbcType=DOUBLE},
            </if>
            <if test="payFine != null">
                pay_fine = #{payFine,jdbcType=DOUBLE},
            </if>
            <if test="payTotal != null">
                pay_total = #{payTotal,jdbcType=DOUBLE},
            </if>
            <if test="payTime != null">
                pay_time = #{payTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where pay_id = #{payId,jdbcType=INTEGER}
    </update>


    <update id="updateByPrimaryKey" parameterType="com.zaqacu.entity.Pay">
    update pay
    set pay_staff_uid = #{payStaffUid},
      pay_basic_id = #{payBasicId,jdbcType=INTEGER},
      pay_mertis_id = #{payMertisId,jdbcType=INTEGER},
      pay_rewords = #{payRewords,jdbcType=DOUBLE},
      pay_fine = #{payFine,jdbcType=DOUBLE},
      pay_total = #{payTotal,jdbcType=DOUBLE},
      pay_time = #{payTime,jdbcType=TIMESTAMP}
    where pay_id = #{payId,jdbcType=INTEGER}
  </update>


</mapper>